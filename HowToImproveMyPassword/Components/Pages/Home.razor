@page "/"
@*main page url *@
@rendermode InteractiveServer
@* Interactive Server to update data make for example when we press button it will update value *@
@inject IJSRuntime JS 
@* use inject in order to use javascript files *@
@inject NavigationManager NavigationManager


<p style="font-size:35px; color: #A37E2C;">howtoimprovemypassword.org</p
<div class="centerContent">
    <div class="label-container">
         @if (!isMiniGame){
            <p style="color: #A37E2C;">@RememberingDifficulty</p> 
            <button class="custom-button" @onclick="() => { GetRandPassword();}">Generate</button>
            <div style="border: 2px solid #023228; width: 20px; height: 20px; background-color: @SquareColor;  border-radius:8px;">
            </div>
            <p style="font-size:20px; color: #A37E2C;">Estimated crack time @crackTime - Seconds </p>
         }
    </div>
   
     @if (!isMiniGame){
         <div>
             <InputText  id="passwordInput" @bind-Value="InputValue" @oninput="HandleInput" type="@PasswordType" class="large-input" placeholder="Type password here" />
             <button  class="custom-button" @onclick="TogglePasswordVisibility">See Password</button>
        </div>
     }
     else {
         
           <p style="font-size:30px; color: #A37E2C;">Try to remember your password :0</p>
           <p style="font-size:30px; color: #A37E2C;">@gameState</p>
           <p style="font-size:30px;color: #A37E2C;">@remainingSeconds:seconds</p>

             if(isGameStarted){
            <InputText @bind-Value="GuessPassword" class="large-input" placeholder="Type your password again" />
        }
        else
        {
              <p style="font-size:30px;color: #A37E2C;">Your password = @InputValue</p>
             <InputText  @bind-Value="DynamicTimeValue" @oninput="HandleTimeInput" class="large-input" placeholder="Default 5 seconds"/>
        }
    }
    <div class="button-container">
        @if (!isMiniGame)
        {
             <button class="custom-button" @onclick="() => { replacePassWithSuggestion();}">Try Suggestion</button>
             <button class ="custom-button" @onclick="MiniGameButton">Try MiniGame</button>
        }
        else{
         
            <button class="custom-button" @onclick="CloseMiniGameButton">Back</button>
           
            @if (isGameStarted)
            {
                <button class="custom-button" @onclick="Subbmit">Subbmit</button>
            }
            else {
                 <button class="custom-button" @onclick="StartGame">Start Game</button>
            }
        }
    </div>
     @if (!isMiniGame){
        <p style="color: #A37E2C;">@LeakCheckMessage</p>
        <p style="font-size:15px; color: #A37E2C;">Smart Suggestion - @SuggestedPass</p>
     }
</div>
 @if (!isMiniGame){
    <p style="font-size:20px;  color: #A37E2C;"> Validation Result: @Result</p>
 }
@code {
    //All variables 
    private string InputValue;
    private string GuessPassword = string.Empty;
    private string resultMessage;
    private string Result = string.Empty;   // Holds the validation result
    private bool isMiniGame = false;
    private bool isGameStarted = false;
    private string PasswordType = "password";
    private string SquareColor = "green";
    private string SuggestedPass = "H3ll0 W0r1d!";
    private string RememberingDifficulty = "";
    private int outputInt = 0;
    private int outputGuess = 0;
    private long crackTime;
    private string randomPassword;
    private string LeakCheckMessage { get; set; }
    private string LeakStatusClass { get; set; }
    private int remainingSeconds = 5;
    private bool isTimerRunning = false;
    private bool isTimerCompleted = false;
    private string gameState = "";
    private int TimeValue = 5;
    private string DynamicTimeValue = "Default 5 seconds";
    private async Task HandleInput(ChangeEventArgs e)
    {
        InputValue = e.Value.ToString(); 
        await Task.Delay(10); //add delay in order to check password with new value if we check instantly our valube will be previos for ex. "pass" it will check "pas"
        await CheckPassword(InputValue); 
    }
    private async Task HandleTimeInput(ChangeEventArgs e)
    {
        DynamicTimeValue = e.Value.ToString(); 
        await Task.Delay(3); //add delay in order to check password with new value if we check instantly our valube will be previos for ex. "pass" it will check "pas"
        await ChangeGameTime(DynamicTimeValue); 
    }
    private async Task CheckPassword(string input) // check password strength
    {
        try
        {
            var result = await JS.InvokeAsync<PasswordCheckResult>("passwordcheck.validatePassword", input);
            var crackResult = await JS.InvokeAsync<CrackTimeResult>("passwordcheck.estimateCrackTime", input);
            SuggestedPass =  await JS.InvokeAsync<string>("passwordcheck.smartSuggestion",input);
            RememberingDifficulty = await JS.InvokeAsync<string>("passwordcheck.rememberingDifficulty",input);
            crackTime = crackResult.output;
            Result = result.outputString;
            outputInt = result.difficulty;

            //color indication of how difficult is this password
            if (result.difficulty < 2)
            {
                SquareColor = "red"; 
            }

            else if (result.difficulty >= 2 && result.difficulty <= 7)
            {
                SquareColor = "yellow"; 
            }
            else if (result.difficulty > 7)
            {
                SquareColor = "green"; 
            }

            var leakCheckResult = await JS.InvokeAsync<PasswordLeakResult>("passwordcheck.isPasswordLeaked", input);
            // indication of possible leaked passwords
            if (leakCheckResult.leaked)
            {
                LeakCheckMessage = $"⚠️ Password has been leaked {leakCheckResult.count} times!";
                LeakStatusClass = "alert-danger";
            }
            else if (leakCheckResult.error)
            {
                LeakCheckMessage = "❌ Error occurred while checking the password leak.";
                LeakStatusClass = "alert-warning";
            }
            else
            {
                LeakCheckMessage = "✅ Password is safe and not found in breaches.";
                LeakStatusClass = "alert-success";
            }
        }
        catch (Exception ex)
        {
            Result = $"Error: {ex.Message}";
        }
    }
    private async Task GetRandPassword() //random password from js script
    {
        try
        {
            InputValue = await JS.InvokeAsync<string>("passwordcheck.getRandomPass");

            CheckPassword(InputValue);

        }
        catch (Exception ex)
        {
            Result = $"Error: {ex.Message}";
        }
    }
    private void MiniGameButton() // open minigame
    {
        isMiniGame = true;
    }
    private void CloseMiniGameButton()// close minigame
    {
        isMiniGame = false;
    }
    private void Subbmit() // subbmit guess 
    {
        if (InputValue == GuessPassword)
            gameState = "You Won"; // Success
        else
            gameState = "You Lost"; // Failure

        remainingSeconds = 0; 
        isGameStarted = false;
        isTimerRunning = false;
        isTimerCompleted = true;
    }
    private void TogglePasswordVisibility()
    {
        // Toggle the password type between 'password' and 'text'
        PasswordType = PasswordType == "password" ? "text" : "password";
    }
    private async Task ChangeGameTime(string input)
    {
       if (int.TryParse(input, out int parsedValue))
        {
            TimeValue = parsedValue; // Successfully parsed
        }
        else
        {
            TimeValue = 5; // Default value or handle invalid input as needed
        }
    }
    private async Task StartGame()
    {
        gameState = "";
        remainingSeconds = TimeValue;
        isGameStarted = true;
        isTimerRunning = true;
        isTimerCompleted = false;

        while (remainingSeconds > 0)
        {
            await Task.Delay(1000); // Wait for 1 second
            remainingSeconds--;
            StateHasChanged(); // Force UI update
            if (remainingSeconds < 0)
                remainingSeconds = 0;
        }

        isTimerRunning = false;
        isTimerCompleted = true;

        // Reset the timer after completion
        remainingSeconds = TimeValue;

        if (isGameStarted)
            Subbmit();

        isTimerCompleted = false;
    }
    public async Task replacePassWithSuggestion()
    {
        InputValue = SuggestedPass;
        RememberingDifficulty = await JS.InvokeAsync<string>("passwordcheck.rememberingDifficulty",InputValue);
    }
    
    // class object for outputing data
    public class PasswordCheckResult
    {
        public string outputString { get; set; }
        public int difficulty { get; set; }

    }
    public class CrackTimeResult
    {
        public long output { get; set; } // Matches 'output' returned by JS
    }
    private class PasswordLeakResult
    {
        public bool leaked { get; set; }
        public int count { get; set; }
        public bool error { get; set; }
    }
    private class SavedPassword
    {
        public string Username { get; set; }
        public string Password { get; set; }
    }
}
